syntax = "proto3";

package envoy.extensions.filters.http.golang.v3alpha;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

import "xds/annotations/v3/status.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.golang.v3alpha";
option java_outer_classname = "GolangProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/golang/v3alpha";
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: golang extension filter]
// golang extension filter.

// In the below example, we configured two go plugins plugin1 and plugin2 by way of go extension.
// bootstrap_extensions:
//   - name: envoy.bootstrap.dso
//     typed_config:
//       "@type": type.googleapis.com/envoy.extensions.dso.v3.dso
//       so_id: plugin1
//       so_path: "/home/plugins/libgo_plugin1_extension.so"
//   - name: envoy.bootstrap.dso
//     typed_config:
//       "@type": type.googleapis.com/envoy.extensions.dso.v3.dso
//       so_id: plugin2
//       so_path: "/home/plugins/libgo_plugin2_extension.so"
// filter_chains:
//      - filters:
//          - name: envoy.filters.network.http_connection_manager
//            typed_config:
//              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
//              codec_type: auto
//              stat_prefix: ingress_http
//              access_log:
//                - name: envoy.access_loggers.file
//                  typed_config:
//                    "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
//                    path: "/dev/stdout"
//              route_config:
//                name: local_route
//                virtual_hosts:
//                  - name: app1
//                    domains:
//                      - "*"
//                    typed_per_filter_config:
//                      golang:
//                        "@type": type.googleapis.com/envoy.extensions.filters.golang.ConfigsPerRoute
//                        plugins_config:
//                          plugin1:
//                           config:
//                            "@type": type.googleapis.com/envoy.extensions.filters.http.golang.plugins.plugin1.v3.Config
//                            xxx1-app: xx1
//                            xxx2-app: xx2
//                    routes:
//                      - match:
//                          prefix: /plugin1
//                        route:
//                          cluster: test
//                        typed_per_filter_config:
//                          golang:
//                            "@type": type.googleapis.com/envoy.extensions.filters.golang.ConfigsPerRoute
//                            plugins_config:
//                              plugin1:
//                               config:
//                                "@type": type.googleapis.com/envoy.extensions.filters.http.golang.plugins.plugin1.v3.Config
//                                xxx1-router: xx1-0
//                                xxx2-router: xx2-0
//                      - match:
//                          prefix: /
//                        route:
//                          cluster: test
//                        typed_per_filter_config:
//                          golang:
//                            "@type": type.googleapis.com/envoy.extensions.filters.golang.ConfigsPerRoute
//                            plugins_config:
//                              plugin1:
//                               config:
//                                "@type": type.googleapis.com/envoy.extensions.filters.http.golang.plugins.plugin1.v3.Config
//                                xxx1-router: xx1
//                                xxx2-router: xx2
//                              plugin2:
//                               config:
//                                "@type": type.googleapis.com/envoy.extensions.filters.http.golang.plugins.plugin2.v3.Config
//                                xxx1-router: xx1
//                                xxx2-router: xx2
//              http_filters:
//                - name: envoy.filters.http.golang
//                  typed_config:
//                    "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3.Config
//                    so_id: plugin1
//                    merge_policy: MERGE_VIRTUALHOST_ROUTER_FILTER
//                    plugin_name: plugin1
//                    plugin_config:
//                      "@type": type.googleapis.com/envoy.extensions.filters.http.golang.plugins.plugin1.v3.Config
//                      xxx1: xx1
//                      xxx2: xx2
//                - name: envoy.filters.http.golang
//                  typed_config:
//                    "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3.Config
//                    so_id: plugin2
//                    merge_policy: OVERRIDE
//                    plugin_name: plugin2
//                    plugin_config:
//                      "@type": type.googleapis.com/envoy.extensions.filters.http.golang.plugins.plugin2.v3.Config
//                      xxx1: xx1
//                      xxx2: xx2
// [#not-implemented-hide:]
message Config {
  enum MergePolicy {
    MERGE_VIRTUALHOST_ROUTER_FILTER = 0;
    MERGE_VIRTUALHOST_ROUTER = 1;
    OVERRIDE = 3;
  }

  // A unique ID for a set of go plugin library.
  string so_id = 1 [(validate.rules).string = {min_bytes: 1}];

  // plugin_name is the name of the go plugin, which needs to be consistent with the name
  // registered in StreamFilterFactoryManager::RegisterStreamFactory.
  string plugin_name = 2 [(validate.rules).string = {min_bytes: 1}];

  // plugin_config is the configuration of the go plugin, note that this configuration is
  // only parsed in the go plugin.
  google.protobuf.Any plugin_config = 3;

  // merge_policy is the merge policy configured by the go plugin.
  // go plugin configuration supports three dimensions: the virtual host’s typed_per_filter_config,
  // the route’s typed_per_filter_config or filter's config.
  // The meanings are as follows:
  // MERGE_VIRTUALHOST_ROUTER_FILTER: pass all configuration into go plugin.
  // MERGE_VIRTUALHOST_ROUTER: pass Virtual-Host and Router configuration into go plugin.
  // OVERRIDE: override according to Router > Virtual_host > Filter priority and pass the
  // configuration to the go plugin.
  MergePolicy merge_policy = 4 [(validate.rules).enum = {defined_only: true}];
}

// [#not-implemented-hide:]
message RouterPlugin {
  // The extension_plugin_options field is used to provide extension options for plugin.
  google.protobuf.Struct extension_plugin_options = 1;

  // The config field is used to setting plugin config.
  google.protobuf.Any config = 2;
}

// [#not-implemented-hide:]
message ConfigsPerRoute {
  // plugins_config is the configuration of the go plugin at the per-router, and
  // key is the name of the go plugin.
  // Example
  // typed_per_filter_config:
  //   golang:
  //     "@type": type.googleapis.com/golang.http.ConfigsPerRoute
  //     plugins_config:
  //       plugin1:
  //        extension_plugin_options:
  //          disabled: true
  //        config:
  //          "@type": type.googleapis.com/golang.http.plugin1
  //          xxx: xxx
  //       plugin2:
  //        config:
  //          "@type": type.googleapis.com/golang.http.plugin2
  //          xxx: xxx
  map<string, RouterPlugin> plugins_config = 1;
}
